{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,UAAWL,SAASC,cAAc,oBAKpC,SAASK,EAAcC,EAAUL,GAC/B,OAAO,IAAIM,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEF,WAAUL,UAEpBQ,EAAO,CAAEH,WAAUL,S,GAEpBA,E,IAXPJ,EAAKO,UAAUU,iBAAiB,SAehC,SAAyBC,GACvBA,EAAEC,iBAMF,IAJA,IAAIC,EAAaC,OAAOrB,EAAKI,MAAMkB,OAC/BjB,EAAOgB,OAAOrB,EAAKK,KAAKiB,OACxBhB,EAASe,OAAOrB,EAAKM,OAAOgB,OAEvBC,EAAI,EAAGA,EAAIjB,EAAQiB,IAC1B,IAAIH,EAAa,GAAKf,EAAO,GAAKC,GAAU,EAExC,YADFR,EAAA0B,OAAOC,QAAQ,4BAGfjB,EAAc,EAAIe,EAAGH,EAAaG,EAAIlB,GACnCqB,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUL,EAAKuB,EAALvB,MACjBN,EAAA0B,OAAOI,QAAQ,uBAAwCC,OAAfpB,EAAS,QAAYoB,OAANzB,EAAM,M,IAE9D0B,OAAM,SAAAH,G,IAAGlB,EAAQkB,EAARlB,SAAUL,EAAKuB,EAALvB,MAClBN,EAAA0B,OAAOC,QAAQ,sBAAqCI,OAAfpB,EAAS,QAAYoB,OAANzB,EAAM,M,GAC1D,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  btnSubmit: document.querySelector('[type=\"submit\"]'),\n};\n\nrefs.btnSubmit.addEventListener('click', onCreatePromise);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onCreatePromise(e) {\n  e.preventDefault();\n\n  let valueDelay = Number(refs.delay.value);\n  let step = Number(refs.step.value);\n  let amount = Number(refs.amount.value);\n\n  for (let i = 0; i < amount; i++) {\n    if (valueDelay < 0 || step < 0 || amount <= 0) {\n      Notify.failure('❌ Enter positive numbers');\n      return;\n    } else {\n      createPromise(1 + i, valueDelay + i * step)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n  }\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","btnSubmit","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","valueDelay","Number","value","i","Notify","failure","then","param","success","concat","catch"],"version":3,"file":"03-promises.4488959f.js.map"}